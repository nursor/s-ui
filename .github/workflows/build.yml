name: Build and Release

on:
  push:
    branches: [ feat/liang ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ feat/liang ]

env:
  GO_VERSION: '1.25'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc musl-dev libc-dev make git wget unzip

    - name: Build frontend
      run: |
        cd frontend
        npm install
        npm run build
        cd ..
        mv frontend/dist web/html
        rm -fr frontend

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
            variant: ""
          - platform: linux/arm64
            arch: arm64
            variant: ""
          - platform: linux/arm/v7
            arch: arm
            variant: "v7"
          - platform: linux/arm/v6
            arch: arm
            variant: "v6"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ matrix.arch }},enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          TARGETARCH=${{ matrix.arch }}
          TARGETVARIANT=${{ matrix.variant }}

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc musl-dev libc-dev make git wget unzip

    - name: Build binaries
      run: |
        # Build for multiple platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "linux/arm/v7"
          "windows/amd64"
          "darwin/amd64"
          "darwin/arm64"
        )
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r os arch variant <<< "$platform"
          output_name="sui-${os}-${arch}"
          if [ -n "$variant" ]; then
            output_name="${output_name}-${variant}"
          fi
          if [ "$os" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          
          echo "Building for $platform -> $output_name"
          GOOS=$os GOARCH=$arch CGO_ENABLED=1 go build \
            -ldflags="-w -s" \
            -tags "with_quic,with_grpc,with_utls,with_acme,with_gvisor" \
            -o "dist/$output_name" main.go
        done

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
