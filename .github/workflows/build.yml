name: Build Binaries

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  GO_VERSION: '1.25'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            variant: ""
          - os: linux
            arch: arm64
            variant: ""
          - os: windows
            arch: amd64
            variant: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc musl-dev libc-dev make git wget unzip
        # Install cross-compilation tools for Windows
        if [ "${{ matrix.os }}" = "windows" ]; then
          sudo apt-get install -y gcc-mingw-w64-x86-64
        fi

    - name: Build frontend
      run: |
        cd frontend
        npm install
        npm run build
        cd ..
        mv frontend/dist web/html
        rm -fr frontend

    - name: Build binary
      run: |
        mkdir -p dist
        
        output_name="sui-${{ matrix.os }}-${{ matrix.arch }}"
        if [ -n "${{ matrix.variant }}" ]; then
          output_name="${output_name}-${{ matrix.variant }}"
        fi
        if [ "${{ matrix.os }}" = "windows" ]; then
          output_name="${output_name}.exe"
        fi
        
        echo "Building for ${{ matrix.os }}/${{ matrix.arch }} -> $output_name"
        
        # Set environment variables for cross-compilation
        export GOOS=${{ matrix.os }}
        export GOARCH=${{ matrix.arch }}
        export CGO_ENABLED=1
        
        # Set compiler for Windows cross-compilation
        if [ "${{ matrix.os }}" = "windows" ]; then
          export CC=x86_64-w64-mingw32-gcc
        fi
        
        go build \
          -ldflags="-w -s" \
          -tags "with_quic,with_grpc,with_utls,with_acme,with_gvisor" \
          -o "dist/$output_name" main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sui-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.variant && format('-{0}', matrix.variant) || '' }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Create checksums
      run: |
        cd dist
        find . -name "*.exe" -o -name "sui-*" | xargs sha256sum > checksums.txt
        ls -la

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
