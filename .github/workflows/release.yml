name: Build and Release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  GO_VERSION: '1.25'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc musl-dev libc-dev make git wget unzip

    - name: Build frontend
      run: |
        cd frontend
        npm install
        npm run build

    - name: Build binaries
      run: |
        mkdir -p dist
        
        # Build for multiple platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "linux/arm/v7"
          "windows/amd64"
          "darwin/amd64"
          "darwin/arm64"
        )
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r os arch variant <<< "$platform"
          output_name="sui-${os}-${arch}"
          if [ -n "$variant" ]; then
            output_name="${output_name}-${variant}"
          fi
          if [ "$os" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          
          echo "Building for $platform -> $output_name"
          
          # Set environment variables for cross-compilation
          export GOOS=$os
          export GOARCH=$arch
          export CGO_ENABLED=1
          
          # Install cross-compilation toolchain if needed
          if [ "$os" = "windows" ]; then
            sudo apt-get install -y gcc-mingw-w64-x86-64
            export CC=x86_64-w64-mingw32-gcc
          elif [ "$os" = "darwin" ]; then
            # For macOS cross-compilation, we need osxcross
            # This is a simplified version - in practice you might need osxcross
            echo "Skipping macOS build due to cross-compilation complexity"
            continue
          fi
          
          go build \
            -ldflags="-w -s" \
            -tags "with_quic,with_grpc,with_utls,with_acme,with_gvisor" \
            -o "dist/$output_name" main.go
        done

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        ls -la

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sui-binaries
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: sui-binaries
        path: dist/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}